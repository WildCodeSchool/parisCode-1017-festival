{% extends 'base.html.twig' %}

{% block stylesheets %}

    <link rel="stylesheet" type="text/css" href="{{ asset('css/stylediscover.css') }}">

{% endblock %}

{% block body %}

    <div class="discover">
        <div class="row">
            <div class="col s12 m4 festival">
                <div class="row search">
                    <div class="input-field">

                        {# TODO: search bar in Ajax && create form builder #}
                        <form id="searchBar" action="{{ path('search_bar') }}" method="POST">
                            <input type="text" id="autocomplete-input" class="autocomplete" name="search">
                            <label for="autocomplete-input">Search by festival, genre or artist</label>
                        </form>
                        <div class="center-align hide-on-med-and-up">
                            <button id="switch">Change View</button>
                        </div>
                        <!-- Switch -->
                    </div>
                </div>
                <div id="festival-cards" class="row festival-cards">
                    {% include ('default/includes/festivalCard.html.twig') %}
                </div>
            </div>
            <!--.festival -->
            <div class="col s12 offset-m4 m8 map">
                <div id="map"></div>
            </div>
            <!--.map -->
        </div>
        <!--.row -->
    </div>
    <!--.discover -->

{% endblock %}

{% block footer %}
{% endblock footer %}

{% block javascripts %}
    <!--GoogleMaps script -->
    <script>
        function initMap() {

            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 5,
                center: {
                    {% if user.location.latitude is defined %}
                        lat: {{ user.location.latitude }},
                        lng: {{ user.location.longitude }}
                    {% else %}
                        lat: 48.864716,
                        lng: 2.349014
                    {% endif %}
                }
            });
            // Create an array of alphabetical characters used to label the markers.
            var labels = [
            ];

            var infoWin = new google.maps.InfoWindow();
            // Add some markers to the map.
            // Note: The code uses the JavaScript Array.prototype.map() method to
            // create an array of markers based on a given "locations" array.
            // The map() method here has nothing to do with the Google Maps API.
            var markers = locations.map(function(location, i) {
                var marker = new google.maps.Marker({
                    position: location,
                    label: labels[i % labels.length]
                });
                google.maps.event.addListener(marker, 'click', function() {
                    infoWin.setContent(location.info);
                    infoWin.open(map, marker);
                });
                return marker;
            });

            // markerCluster.setMarkers(markers);
            // Add a marker clusterer to manage the markers.
            var markerCluster = new MarkerClusterer(map, markers, {
                imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'});
        }
        var locations = [
                {% for festival in festivals %}{
                lat: {{ festival.location.latitude }},
                lng: {{ festival.location.longitude }},
                info: '<a class="modal-trigger" href="{{ '#modal' ~ festival.id ~ 'b' }}">{{ festival.title }}</a>'
            },{% endfor %}
        ];


    </script>
    <script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js">
    </script>
    <script async defer
            src={{ 'https://maps.googleapis.com/maps/api/js?key=' ~ google_maps_api  ~ '&content_copy&callback=initMap' }}>
    </script>
    <!--.GoogleMaps script -->
    <!--Custom script -->
    <script>
        $(document).ready(function(){
            $('.modal').modal();
        });

        $("#switch").click(function(){
            $("#map").toggleClass("switcher");
        });

        $("#searchBar").submit(function(e){
            e.preventDefault();
            var form = $(this);
            var search = $("#autocomplete-input").val();
            var action = form.attr('action');

            $.ajax({
                url: action,
                type: "POST",
                dataType: "json",
                data: {'search': search},
                timeout: 2000,
                success: function(response){
                    $("#festival-cards").html(response);
                },
                errors: function(error){
                    console.log(error)
                }
            })
        });

        // Add a festival to WishLIst
        $(".addFestivalToWishlist").on('click', function(event){
            event.preventDefault();
            var href = $(this).attr('href');
            var elemen = $(this);
            $.ajax({
                url: href,
                type: "GET",
                success: function(response){
                    if (response === true){
                        Materialize.toast('The festival is now added to your wishlist!', 2000);
                        elemen.html("<i class='material-icons'>favorite</i>");

                    } else{
                        Materialize.toast('The festival is now deleted from your wishlist!', 2000)
                        elemen.html("<i class='material-icons'>favorite_border</i>");
                    }
                }
            })
        })

        // Add a concert to WishLIst
        $(".addConcertToWishlist").on('click', function(event){
            event.preventDefault();
            var href = $(this).attr('href');
            var elemen = $(this);
            $.ajax({
                url: href,
                type: "GET",
                success: function(response){
                    if (response === true){
                        Materialize.toast('The concert is now added to your wishlist!', 2000);
                        elemen.html("<i class='material-icons'>favorite</i>");

                    } else{
                        Materialize.toast('The concert is now deleted from your wishlist!', 2000)
                        elemen.html("<i class='material-icons'>favorite_border</i>");
                    }
                }
            })
        })
    </script>
    <!--.Custom script -->

{% endblock javascripts %}